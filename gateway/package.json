{
    "name": "gateway",
    "version": "5.2.0",
    "description": "Interactive Learning with Individual Feedback",
    "private": true,
    "license": "MIT",
    "cacheDirectories": [
        "node_modules"
    ],
    "devDependencies": {
        "generator-jhipster": "7.2.0",
        "husky": "7.0.2",
        "lint-staged": "11.1.2",
        "prettier": "2.4.1"
    },
    "engines": {
        "node": ">=14.16.0 <15"
    },
    "lint-staged": {
        "src/{main/webapp,test}/**/*.{json,js,ts,css,scss,html}": "prettier --write",
        "src/{main,test}/java/**/*.java": "bash ./linting.sh"
    },
    "scripts": {
        "postinstall": "husky install",
        "prettier:write": "prettier --write \"src/{main/webapp,test}/**/*.{json,ts,js,css,scss,html}\"",
        "prettier:check": "prettier --check \"src/{main/webapp,test}/**/*.{json,ts,js,css,scss,html}\"",
        "lint": "eslint . --ext .ts",
        "lint:fix": "npm run lint --fix",
        "lint:doc": "tslint --config tslint-doc.json --project tsconfig.json -e 'node_modules/**'",
        "cleanup": "rimraf build/resources/main/static/ build/resources/main/aot",
        "clean-www": "rimraf build/resources/main/static/app/{src,build/}",
        "start-docker": "npm run webapp:dev --hot --env.docker",
        "build": "npm run webapp:prod",
        "pretest": "npm run lint",
        "docker:kafka:up": "docker-compose -f src/main/docker/kafka.yml up -d",
        "docker:kafka:down": "docker-compose -f src/main/docker/kafka.yml down -v --remove-orphans",
        "docker:jhipster-registry:up": "docker-compose -f src/main/docker/jhipster-registry.yml up -d",
        "docker:jhipster-registry:down": "docker-compose -f src/main/docker/jhipster-registry.yml down -v --remove-orphans",
        "docker:others:await": "echo \"Waiting for jhipster-registry to start\" && wait-on http-get://localhost:8761/management/health && echo \"jhipster-registry started\"",
        "predocker:others:up": "",
        "docker:others:up": "npm run docker:kafka:up && npm run docker:jhipster-registry:up",
        "docker:others:down": "npm run docker:kafka:down && npm run docker:jhipster-registry:down",
        "backend:info": "./gradlew -v",
        "backend:doc:test": "./gradlew javadoc -x webapp",
        "backend:nohttp:test": "./gradlew checkstyleNohttp -x webapp",
        "backend:start": "./gradlew -x webapp",
        "java:jar": "./gradlew bootJar -x test -x integrationTest",
        "java:war": "./gradlew bootWar -Pwar -x test -x integrationTest",
        "java:docker": "./gradlew bootJar jibDockerBuild",
        "backend:unit:test": "./gradlew test integrationTest -x webapp -Dlogging.level.ROOT=OFF -Dlogging.level.org.zalando=OFF -Dlogging.level.tech.jhipster=OFF -Dlogging.level.de.tum.in.www1.artemis=OFF -Dlogging.level.org.springframework=OFF -Dlogging.level.org.springframework.web=OFF -Dlogging.level.org.springframework.security=OFF",
        "backend:build-cache": "npm run backend:info && npm run backend:nohttp:test && npm run ci:e2e:package",
        "java:jar:dev": "npm run java:jar -- -Pdev,webapp",
        "java:jar:prod": "npm run java:jar -- -Pprod",
        "java:war:dev": "npm run java:war -- -Pdev,webapp",
        "java:war:prod": "npm run java:war -- -Pprod",
        "java:docker:dev": "npm run java:docker -- -Pdev,webapp",
        "java:docker:prod": "npm run java:docker -- -Pprod"
    }
}
