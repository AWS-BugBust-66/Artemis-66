buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.spring.io/plugins-release" }
    }
    dependencies {
        classpath "io.spring.gradle:propdeps-plugin:0.0.10.RELEASE"
    }
}

plugins {
    id "checkstyle"
    id "java"
    id "maven-publish"
    id "idea"
    id "eclipse"
    id "jacoco"
    id "org.springframework.boot" version "${spring_boot_version}"
    id "com.google.cloud.tools.jib" version "3.1.4"
    id "com.github.node-gradle.node" version "3.1.1"
    id "com.diffplug.spotless" version "5.15.1"
    id "org.openapi.generator"
    id "io.spring.nohttp"
    id "com.github.andygoossens.gradle-modernizer-plugin" version "1.6.1"
    //jhipster-needle-gradle-plugins - JHipster will add additional gradle plugins here
}

group = "de.tum.in.www1.artemis"
version = "5.2.0"
description = "Interactive Learning with Individual Feedback"

sourceCompatibility = 16
targetCompatibility = 16

apply from: "gradle/docker.gradle"
apply from: "gradle/swagger.gradle"
//jhipster-needle-gradle-apply-from - JHipster will add additional gradle scripts to be applied here

if (project.hasProperty("prod")) {
    apply from: "gradle/profile_prod.gradle"
} else {
    apply from: "gradle/profile_dev.gradle"
}

if (project.hasProperty("war")) {
    apply from: "gradle/war.gradle"
}

if (project.hasProperty("zipkin")) {
    apply from: "gradle/zipkin.gradle"
}

idea {
    module {
        excludeDirs += files("node_modules")
    }
}


spotless {
    // allows to execute the code formatting commands ./gradlew spotlessApply and ./gradlew spotlessCheck
    java {
        target project.fileTree(project.rootDir) {
            include "**/*.java"
            exclude "**/src/main/java/de/tum/in/www1/artemis/config/SecurityConfiguration.java", "**/node_modules/**", "**/out/**", "**/repos/**", "**/build/**", "**/src/main/generated/**", "**/src/main/resources/templates/**"
        }
        importOrderFile "artemis-spotless.importorder"
        eclipse().configFile "artemis-spotless-style.xml"

        removeUnusedImports()
    }
}

defaultTasks "bootRun"

springBoot {
    mainClass = "de.tum.in.www1.artemis.GatewayApp"
}

modernizer {
    failOnViolations = true
    includeTestClasses = true
}

test {
    useJUnitPlatform()
    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    testLogging.showStandardStreams = true
    reports.html.required = false
    jvmArgs "--illegal-access=warn"

}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

checkstyle {
    toolVersion "8.45"
    configFile file("checkstyle.xml")
    checkstyleTest.enabled = false
}
nohttp {
    source.include "build.gradle", "README.md"
}

configurations {
    providedRuntime
    implementation.exclude module: "spring-boot-starter-tomcat"
}

repositories {
    mavenLocal()
    mavenCentral()
    //jhipster-needle-gradle-repositories - JHipster will add additional repositories
}

dependencies {
    // import JHipster dependencies BOM
    implementation platform("tech.jhipster:jhipster-dependencies:${jhipster_dependencies_version}")

    // Use ", version: jhipsterDependenciesVersion, changing: true" if you want
    // to use a SNAPSHOT release instead of a stable release
    implementation group: "tech.jhipster", name: "jhipster-framework", {
        exclude group: "org.springframework", module: "spring-webmvc"
    }
    implementation "org.jasypt:jasypt:1.9.3"
    // https://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit
    implementation "org.eclipse.jgit:org.eclipse.jgit:${jgit_version}"
    implementation "org.eclipse.jgit:org.eclipse.jgit.ssh.apache:${jgit_version}"
    implementation "javax.annotation:javax.annotation-api"
    implementation "io.dropwizard.metrics:metrics-core"
    implementation "io.micrometer:micrometer-registry-prometheus:1.7.2"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hppc:${fasterxml_version}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${fasterxml_version}"
    implementation "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:${fasterxml_version}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${fasterxml_version}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${fasterxml_version}"
    implementation "javax.cache:cache-api:1.1.1"
    implementation "commons-beanutils:commons-beanutils:${commons_beanutils_version}"
    implementation "org.apache.commons:commons-lang3"
    implementation "commons-codec:commons-codec:1.15"
    implementation "javax.transaction:javax.transaction-api:1.3"
    implementation "org.springframework.boot:spring-boot-loader-tools:${spring_boot_version}"
    implementation "org.springframework.boot:spring-boot-starter-mail:${spring_boot_version}"
    implementation "org.springframework.boot:spring-boot-starter-logging:${spring_boot_version}"
    implementation "org.springframework.boot:spring-boot-starter-actuator:${spring_boot_version}"
    implementation "io.projectreactor.kafka:reactor-kafka"
    implementation "org.springframework.boot:spring-boot-starter-security:${spring_boot_version}"
    implementation("org.springframework.boot:spring-boot-starter-webflux:${spring_boot_version}") {
        exclude module: "spring-boot-starter-tomcat"
    }
    implementation "org.springframework.boot:spring-boot-starter-validation:${spring_boot_version}"
    implementation "io.netty:netty-tcnative-boringssl-static"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf:${spring_boot_version}"
    implementation "org.zalando:problem-spring-webflux"
    implementation "org.springframework.cloud:spring-cloud-starter-gateway"
    implementation "com.github.vladimir-bukhtoyarov:bucket4j-core"
    implementation "com.github.vladimir-bukhtoyarov:bucket4j-jcache"
    implementation "org.springframework.cloud:spring-cloud-starter"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-hystrix"
    implementation "org.springframework.retry:spring-retry"
    implementation "org.springframework.cloud:spring-cloud-starter-bootstrap"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:3.0.4"
    implementation "org.springframework.cloud:spring-cloud-starter-config:3.0.5"
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign"
    implementation "org.springframework.security:spring-security-config:${spring_security_version}"
    implementation "org.springframework.security:spring-security-web:${spring_security_version}"
    implementation "org.springframework.data:spring-data-jpa"

    implementation "io.jsonwebtoken:jjwt-api:0.11.2"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:0.11.2"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:0.11.2"
    implementation("io.springfox:springfox-oas")
    implementation("io.springfox:springfox-swagger2:3.0.0") {
        exclude module: "mapstruct"
    }
    implementation "io.springfox:springfox-bean-validators:3.0.0"

    annotationProcessor "org.glassfish.jaxb:jaxb-runtime:${jaxb_runtime_version}"
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor:${spring_boot_version}") {
        exclude group: "com.vaadin.external.google", module: "android-json"
    }
    testImplementation("org.springframework.boot:spring-boot-starter-test:${spring_boot_version}") {
        exclude module: "junit"
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
        exclude group: "com.vaadin.external.google", module: "android-json"
    }
    testImplementation "org.springframework.security:spring-security-test:${spring_security_version}"
    testImplementation "org.springframework.boot:spring-boot-test:${spring_boot_version}"
    testImplementation "org.junit.jupiter:junit-jupiter:${junit_version}"
    testImplementation "com.tngtech.archunit:archunit-junit5-api:0.20.1"
    testRuntimeOnly "com.tngtech.archunit:archunit-junit5-engine:0.20.1"
    testImplementation "org.testcontainers:kafka"
    developmentOnly "org.springframework.boot:spring-boot-devtools:${spring_boot_version}"
    //jhipster-needle-gradle-dependency - JHipster will add additional dependencies here
}

task cleanResources(type: Delete) {
    delete "build/resources"
}

wrapper {
    gradleVersion = "7.2"
}

node {
    download = true
    version = "${node_version}"
    npmVersion = "${npm_version}"
}

// Command to execute the JavaDoc checkstyle verification ./gradlew checkstyleMain
checkstyle {
    toolVersion "${checkstyle_version}"
    configFile file("checkstyle.xml")
    checkstyleTest.enabled = false
    maxErrors = 0
}

task executeCheckstyle (type: Exec) {
    commandLine "./gradlew", "checkstyleMain", "-x", "npm", "-x", "webapp"
}

task buildJarForDocker (type: Exec) {
    commandLine "./gradlew", "build", "-x", "webapp", "-x", "test", "-x", "jacocoTestCoverageVerification"
}
